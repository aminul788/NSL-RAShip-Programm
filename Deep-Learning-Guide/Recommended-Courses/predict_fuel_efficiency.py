# -*- coding: utf-8 -*-
"""predict_fuel_efficiency.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15u56njOimmX5s-ZmXUUgfOaARThMarOh

# **Predict Fuel Efficiency (Regression)**
"""

# use seaborn for pairplot
  !pip install seaborn

from __future__ import absolute_import, division, print_function

import pathlib

import pandas as pd
import seaborn as sns

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

print(tf.__version__)

"""# **The Auto MPG dataset**
The dataset is available from the [UCI Machine Learnig Repository](https://archive.ics.uci.edu/ml/index.php)

## **Get the data**
First download the dataset
"""

dataset_path = keras.utils.get_file("auto-mpg.data", "https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
dataset_path

column_names = ['MPG', 'Cylinders', 'Displacement', 'Horsepower', 'Weight',
                'Acceleration', 'Model Year', 'Origin']
raw_dataset = pd.read_csv(dataset_path, names=column_names,
                         na_values = "?", comment='\t',
                         sep=" ", skipinitialspace=True)

dataset = raw_dataset.copy()
dataset.tail()

"""### **Clean the data**

To keep this initial tutorial simple drop those rows.
"""

dataset.isna().sum()

"""to keep this initial tutorial simple drop the rows."""

dataset = dataset.dropna()

"""The "Origin" column is really categorical, not numeric. So convert that to a one-hot:"""

origin = dataset.pop('Origin')

dataset['USA'] = (origin == 1)*1.0
dataset['Europe'] = (origin == 2)*1.0
dataset['Japan'] = (origin == 3)*1.0
dataset.tail()

"""## **Split the data into train and test**

Now split the data set into a training set and test set.

We will use the test set in the final evaluation of our model.
"""

train_dataset = dataset.sample(frac=0.8, random_state=0)
test_dataset = dataset.drop(train_dataset.index)

"""## **Inspect the data**

Have a quick look at the joint distribution of a few pairs of columns from the training set.
"""

sns.pairplot(train_dataset[["MPG", "Cylinders", "Displacement", "Weight"]], diag_kind="kde")

"""Also look at the overall statistics:"""

train_stats = train_dataset.describe()
train_stats.pop("MPG")
train_stats = train_stats.transpose()
train_stats

"""## **Split features from labels**

Separate th target value, or "labels", from the features. This label is the value that we will train the model to predict.
"""

train_labels = train_dataset.pop('MPG')
test_labels = test_dataset.pop('MPG')

"""## **Normalize the data**

"""

def norm(x):
  return (x - train_stats['mean']) / train_stats['std']
normed_train_data = norm(train_dataset)
normed_test_data = norm(test_dataset)

"""## **The model**

### **Build the model**
"""

def build_model():
  model = keras.Sequential([
    layers.Dense(64, activation="relu", input_shape=[len(train_dataset.keys())]),
    layers.Dense(64, activation="relu"),
    layers.Dense(1)
  ])

  optimizer = tf.keras.optimizers.RMSprop(0.001)

  model.compile(loss='mse',
                optimizer=optimizer,
                metrics=['mae', 'mse'])
  return model

model = build_model()

"""## **Inspect the model**

use the .summary method to print a simple description of the model.
"""

model.summary()

"""Now try out the model. Take a batch of 10 examples from the training data and call model.predict on it."""

example_batch = normed_train_data[:10]
example_result = model.predict(example_batch)
example_result

"""It seems to be working, and it produces a result of the expected shape and type.

## **Train the model**

Train the model for 1000 epochs, and record the training and valivadion accuracy in the history object.
"""

# Display training progress by printing a single dot for each complited epoch
class PrintDot(keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs):
    if epoch % 100 == 0: print('')
    print('.', end='')

EPOCHS = 1000

history = model.fit(
    normed_train_data, train_labels,
    epochs=EPOCHS, validation_split = 0.2, verbose=0,
    callbacks=[PrintDot()])

"""Visualize the model's training progress using the stats stored in the history object."""

hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()

import matplotlib.pyplot as plt

def plot_history(history):
  hist = pd.DataFrame(history.history)
  hist['epoch'] = history.epoch

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Mean Abs Error [MPG]')
  plt.plot(hist['epoch'], hist['mae'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_mae'],
           label='Val Error')
  plt.legend()
  plt.ylim([0,5])

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Mean Square Error [$MPG^2$]')
  plt.plot(hist['epoch'], hist['mse'], label='Train Error')
  plt.plot(hist['epoch'], hist['val_mse'], label='Val Error')
  plt.legend()
  plt.ylim([0,20])

plot_history(history)

"""improving the model from overfitting."""

model = build_model()

# The patience parameter is the amount of epochs to check for improvement
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)

history = model.fit(normed_train_data, train_labels, epochs=EPOCHS,
                    validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])

plot_history(history)

loss, mae, mse = model.evaluate(normed_test_data, test_labels, verbose=0)

print("Testing set Mean Abs Error: {:5.2f} MPG".format(mae))

"""## **Make Predictions**

Finaly, predict MPG values using data in the testing set:
"""

test_predictions = model.predict(normed_test_data).flatten()

plt.scatter(test_labels, test_predictions)
plt.xlabel('True Values [MPG]')
plt.ylabel('Predictions [MPG]')
plt.axis('equal')
plt.axis('square')
plt.xlim([0, plt.xlim()[1]])
plt.ylim([0, plt.ylim()[1]])
_ = plt.plot([-100, 100], [-100, 100])

error = test_predictions - test_labels
plt.hist(error, bins = 25)
plt.xlabel("Prediction Error [MPG]")
_ = plt.ylabel("Count")

"""It's not quite guassian, but we might expect that because the number of samples is very small."""